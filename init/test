#include "philo.h"

int main(int ac, char **av)
{
    t_table table;

    table = malloc(sizeof(t_table));
    if (check_args(ac, av) == -1)
		return (1);
    ft_init_all(&table);
    print_philo(table.all_philos);
    
} #include "philo.h"

int	ft_isdigit(char *str)
{
    int i; 

    i = -1;
	while(str[++i]) 
    {
        if(str[i] < '0' && str[i] > '9')
            return (-1);
        i++;
    }
	return (0);
}

int	check_args(int argc, char **argv)
{
	int	i;

	i = 1;
	if (argc != 5 && argc != 6)
	{
        printf("Wrong numbers of arguments my guy\n");
		return (-1);
	}
	while (argv[i])
	{
		if (ft_isdigit(argv[i]) == -1 || (!atoi(argv[i])))
		{
			printf("Invalid argument\nShould be some like : [5] [800] [200] [200]");
			return (-1);
		}
		i++;
	}
	return (0);
}
#include "philo.h"

void print_philo(const t_philo *philo)
{
    if (philo == NULL)
    {
        printf("NULL pointer\n");
        return;
    }

    printf("Philo ID: %d\n", philo->id);
    printf("Total Number of Meals: %d\n", philo->nbr_of_meals);
    printf("Total Number of Meals 1: %d\n", philo->nbr_of_meals_1);
    printf("Time of Last Meal: %ld\n", philo->time_last_meal);
    printf("Number of Philos: %d\n", philo->nbr_philo);
    printf("Time to Eat: %d\n", philo->time_to_eat);
    printf("Time to Die: %d\n", philo->time_to_die);
    printf("Time to Sleep: %d\n", philo->time_to_sleep);
    printf("Limit of Life: %ld\n", philo->limit_of_life);
    printf("Stop: %d\n", philo->stop);
    printf("Start Time: %ld\n", philo->start_time);
    printf("Lock Print Address: %p\n", (void *)&philo->lock_print);
    printf("Left Fork Address: %p\n", (void *)philo->left_f);
    printf("Right Fork Address: %p\n", (void *)philo->right_f);
}
#ifndef PHILO_H
# define PHILO_H

# include <unistd.h>
# include <string.h>
# include <stdio.h>
# include <stdlib.h>
# include <pthread.h>
# include <sys/time.h>
# include "philo.h"

struct	s_table;

typedef struct s_philo
{
	int				id;
	int				nbr_of_meals;
	int				nbr_of_meals_1;
	time_t			time_last_meal;
	int				nbr_philo;
	int				time_to_eat;
	int				time_to_die;
	int				time_to_sleep;
	time_t			limit_of_life;
	int				stop;
	time_t			start_time;
	pthread_mutex_t	lock_print;
	pthread_mutex_t	*left_f;
	pthread_mutex_t	*right_f;
	struct s_table	*table;
}					t_philo;

typedef struct s_table
{
	int				nbr_philo;
	int				id;
	time_t			start_time;
	int				time_to_die;
	int				time_to_eat;
	int				time_to_sleep;
	int				dead;
	int				nbr_of_meals;
	pthread_mutex_t	*forks;
	pthread_t		*tids;
	pthread_mutex_t	lock_print;
	t_philo			*all_philos;
}					t_table;

int	check_args(int argc, char **argv);
int	init_tables(t_table *args, char **argv);
void print_philo(const t_philo *philo);
void ft_init_all(t_table *tables);


#endif
