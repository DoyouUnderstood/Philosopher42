#include "philo.h"

void iterate(int count, void (*func)(int, void*), void *table);

// Fonctions de callback pour chaque initialisation
void init_philo_callback(int i, void *table);
//void init_mutex_callback(int i, void *table);
//void init_thread_callback(int i, void *table);

// Vous pouvez ensuite appeler iterate() pour chaque initialisation
void ft_init_all(t_table *tables) 
{
    iterate(tables->nbr_philo, init_philo_callback, tables);
    //iterate(tables->nbr_philo, init_mutex_callback, tables);
    // /iterate(tables->nbr_philo, init_thread_callback, tables);
}

void iterate(int count, void (*func)(int, void*), void *table) 
{
    for (int i = 0; i < count; i++) {
            
        func(i, table);
    }
}

void init_philo_callback(int i, void *table) 
{
    t_table *tables = (t_table *)table;
    t_philo *philos = tables->all_philos;

    philos[i].id = i;
    philos[i].nbr_philo = tables->nbr_philo;
    philos[i].nbr_of_meals = 0;
    philos[i].nbr_of_meals_1 = tables->nbr_of_meals;
    philos[i].time_to_eat = tables->time_to_eat;
    philos[i].time_to_sleep = tables->time_to_sleep;
    philos[i].time_to_die = tables->time_to_die;
    //philos[i].time_last_meal = ft_time();
    philos[i].limit_of_life = tables->time_to_die;
    philos[i].stop = 0;
    philos[i].left_f = &tables->forks[philos[i].id];
    philos[i].right_f = &tables->forks[(philos[i].id + 1) % tables->nbr_philo];
    philos[i].table = tables;
}


void init_mutex_callback(int i, void *table) {
    t_table *tables = (t_table *)table;
    pthread_mutex_init(&tables->forks[i], NULL);
}

// void init_thread_callback(int i, void *table) {
//     t_table *tables = (t_table *)table;
//     pthread_create(&tables->tids[i], NULL, ft_process, (void *)&tables->all_philos[i]);
// }

int	init_tables(t_table *tables, char **tablev)
{
	tables->nbr_philo = atoi(tablev[1]);
	tables->time_to_die = atoi(tablev[2]);
	tables->time_to_eat = atoi(tablev[3]);
	tables->time_to_sleep = atoi(tablev[4]);
	tables->dead = 0;
	if (tablev[6] != NULL)
    {
		tables->nbr_of_meals = atoi(tablev[5]);
		if (tables->nbr_of_meals < 1)
        {
            printf("not good numbers of meals my dude\n Should be more than 1");
			return (-1);
        }
	}
	else
	{
		if (tables->nbr_philo < 1)
			return (-1);
		tables->nbr_of_meals = -1;
	}
	return (0);
}
